<?php

namespace App\Tests\Controller;

use App\Tests\Authenticate;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * Class UserControllerTest
 * @package App\Tests\Controller
 */
class UserControllerTest extends WebTestCase
{
    use Authenticate;

    /**
     * @var \Symfony\Bundle\FrameworkBundle\KernelBrowser
     */
    protected $client;

    const USER_ROUTE = '/api/v1/users';

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->client = static::createClient();
    }

    public function testListForbidden()
    {
        $this->client->request('GET', self::USER_ROUTE);

        $this->assertEquals(401, $this->client->getResponse()->getStatusCode());
    }

    public function testList()
    {
        $this->client->request('GET', self::USER_ROUTE);

        $this->assertEquals(401, $this->client->getResponse()->getStatusCode());

        $registerData = $this->getTokenAuthenticate();
        $token        = $registerData["token"];

        $this->client->request('GET', self::USER_ROUTE,[],[],
                               ["HTTP_X-AUTH-TOKEN" => $token]);

        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());

        $res    = $this->client->getResponse()->getContent();
        $result = json_decode($res, true);

        $this->assertCount(2, $result);
        $this->assertEquals('success', $result["status"]);
        $this->assertCount(1, $result["data"]);
    }

    public function testShow()
    {
        $registerData = $this->getTokenAuthenticate();
        $token        = $registerData["token"];

        $this->client->request('GET', self::USER_ROUTE."/491f6278-828e-4f5f-8a48-e11ea346902a", [], [],
                               ["HTTP_X-AUTH-TOKEN" => $token]);

        $this->assertEquals(404, $this->client->getResponse()->getStatusCode());
        $res = $this->client->getResponse()->getContent();
        $this->assertJson($res);

        $data = json_decode($res, true);

        $this->assertCount(2, $data);
        $this->assertArrayHasKey("status", $data);
        $this->assertArrayHasKey("message", $data);
        $this->assertEquals("error", $data["status"]);
        $this->assertEquals("There is no user with this id 491f6278-828e-4f5f-8a48-e11ea346902a", $data["message"]);

        $this->client->request('GET', self::USER_ROUTE."/491f6278-828e-4f5f-8a48-e11ea346902", [], [],
                               ["HTTP_X-AUTH-TOKEN" => $token]);

        $this->assertEquals(400, $this->client->getResponse()->getStatusCode());
        $res = $this->client->getResponse()->getContent();
        $this->assertJson($res);

        $data = json_decode($res, true);

        $this->assertCount(2, $data);
        $this->assertArrayHasKey("status", $data);
        $this->assertArrayHasKey("message", $data);
        $this->assertEquals("error", $data["status"]);
        $this->assertEquals("Could not convert database value \"491f6278-828e-4f5f-8...\" to Doctrine Type uuid", $data["message"]);

        $this->client->request('GET', self::USER_ROUTE."/".$registerData["user"]["id"], [], [],
                               ["HTTP_X-AUTH-TOKEN" => $token]);

        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());
        $res = $this->client->getResponse()->getContent();
        $this->assertJson($res);

        $data = json_decode($res, true);

        $this->assertArrayHasKey("status", $data);
        $this->assertArrayHasKey("data", $data);
        $this->assertEquals("success", $data["status"]);
        $this->assertCount(2, $data);
        $this->assertCount(6, $data["data"]);
        $this->assertEquals($registerData["user"]["id"], $data["data"]["id"]);
        $this->assertEquals($registerData["user"]["email"], $data["data"]["email"]);
        $this->assertEquals(["id", "email", "created_at", "updated_at", "status", "status_description"], array_keys($data["data"]));
    }

    public function testEnableDisable()
    {
        $registerData = $this->getTokenAuthenticate();
        $token        = $registerData["token"];

        $this->client->request('PUT', self::USER_ROUTE."/491f6278-828e-4f5f-8a48-e11ea346902b/enable", [], [],
                               ["HTTP_X-AUTH-TOKEN" => $token]);
        $this->assertEquals(404, $this->client->getResponse()->getStatusCode());
        $this->assertJson($this->client->getResponse()->getContent());

        $this->client->request('PUT', self::USER_ROUTE."/".$registerData["user"]["id"]."/enable", [], [],
                               ["HTTP_X-AUTH-TOKEN" => $token]);
        $this->assertEquals(204, $this->client->getResponse()->getStatusCode());

        $this->client->request('PUT', self::USER_ROUTE."/".$registerData["user"]["id"]."/disable", [], [],
                               ["HTTP_X-AUTH-TOKEN" => $token]);
        $this->assertEquals(204, $this->client->getResponse()->getStatusCode());
    }
}